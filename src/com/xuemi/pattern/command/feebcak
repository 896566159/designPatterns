命令模式（Command Pattern）：
1）在软件设计中，尝尝需要向某些对象发送请求，而并不清楚请求的接受者是谁，被请求的操作是什么，只需要在程序运行时指定具体的请求接受者即可。
2）命令模式使得 命令发布者和命令执行者 之间解耦
3）命令模式中，一个请求封装为一个对象，以便于使用不同参数来表示不同的请求（即命令），同时命令模式也支持可撤销的操作。
4）角色：
    - Invoker：命令发布者
    - Receiver：命令执行者
    - Command：命令发布者和命令执行着之间的桥梁。负责 接受命令、并指定执行者。Command一般是接口，有具体的子类ConcreteCommand
5）典例：Spring框架JdbcTemplate应用的源码

命令模式的注意事项和细节
1) 将 发起请求的对象与执行请求的对象 解耦。发起请求的对象是调用者（命令发布者），调用者只要调用命令对象的execute()方法就可以让接收者工作，
   而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者（命令执行着）执行请求的动作，也就是说：”请求发起者”和“请求执行者”
   之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。
2) 容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令
3) 容易实现对请求的撤销和重做
4) 命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度
5) 空命令也是一种设计模式，它为我们省去了判空的操作。
6) 命令模式经典的应用场景：界面的一个按钮都是一条命令、模拟CMD（DOS命令） 订单的撤销/恢复、触发-反馈机制