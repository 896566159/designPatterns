适配器模式（也叫作缺省适配器模式、包装器模式）：
1）客户端（调用者）不能直接使用某个类的接口，需要将该类的接口转成客户端（调用者）所希望的另一个接口。
    ①在接口转换的过程中，客户端看不见适配器，仿佛直接和原始的接口接触，耦合性低
    ②用户调用适配器转换后的目标接口方法，适配器去调用被适配器适配的相关接口方法
2）适配器属于结构性模式
3）适配器模式分三类：类适配器模式、对象适配器模式、接口适配器模式

类适配器模式：
    Adapter类：继承需要 被适配的source类，同时 实现适配后的目标destination类，完成 source ——>destination 的适配
    注意事项：1）Java中是单继承，所以直接继承了source类算是一个缺点，有局限性
            2）source类中的方法会在适配器Adapter类中暴露，增加使用成本
            3）继承了Source类，可重写其方法，增强了灵活性

对象适配器模式：
    1）基本思路与类适配器模式相同，只是将适配器Adapter类对Source类的继承关系改为了聚合关系，持有Source类对象，完成 source ——>destination 的适配
    2）是类适配模式的 依据 “合成复用原则” 改进的方法， 将继承关系改成聚合关系，降低耦合性
    3）对象适配器是 适配器模式中 常用的一种方式

接口适配器模式（缺省适配器模式的来源）：
1）当在实际开发中，一个接口定义了很多的方法，而具体的实现类不需要对所有方法都实现，只需要选择其中几个方法进行实现使用，
故可以在 具体的实现类 和 接口 之间 增加一个抽象类（该抽象类对接口实现，且将方法全部进行默认实现（即方法体为空）），
在让具体的实现类来继承该抽象类，并对需要使用的方法进行重写
2）适用于 接口定义了很多类，而 具体的实现类 不需要使用到 接口中的所有方法 时的情况
3）典例：SpringMVC中：适配器设计模式获取到对应的Controller的源码


































