外观模式（过程模式）：
问题引导：
1）电影院中，有很多设备需要被遥控，比如：显示屏、音响、灯光、DVD等，如果这些设备的所有控制（开关、调大调小）都直接
   集成在一个遥控器上会显得非常的乱。且当新的设备加入，遥控器上需要更改代码，违反OCP原则
2）解决：在遥控器和设备之间添加一个缓冲区，该缓冲区将所有被控制的设备都集中起来，并针对影院的影片播放顺序将设备的控
   制顺序组合好（比如：先开灯、把幕布降下来；影片结束，一一关闭所有设备），这样遥控器上将只有影片准备、播放、结束等
   简单的按钮，但是能够控制所有设备

原理：
1）为多个子系统的一组接口提供一个一致的界面，比模式定义了一个高层接口，这个接口使得这些子系统更加容易使用。
  即：多个子系统可能共同完成一件事情，比如：电脑启动，需要电源子系统、显示屏子系统、键盘子系统、网卡系统
  等共同协作，而将这些系统统一的封装在电源开关这一个接口中，客户端只需要关心开关这一个按钮即可，无需关心
  各个子系统之间的情况
2）通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节

外观模式角色：
1) 外观类(Facade): 为调用端提供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当子系统对象
2) 调用者(Client): 外观接口的调用者
3) 子系统的集合：指模块或者子系统，处理Facade 对象指派的任务，他是功能的实际提供者

外观模式的注意事项和细节
1) 外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性
2) 外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展
3) 通过合理的使用外观模式，可以帮我们更好的划分访问的层次
4) 当系统需要进行分层设计时，可以考虑使用Facade模式
5) 在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供
   遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性
6) 不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的。